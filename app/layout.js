import { Titillium_Web } from "next/font/google";
import "./globals.css";

// Font configuration with optimized settings
const titilliumWeb = Titillium_Web({
  variable: "--font-titillium-web",
  subsets: ["latin"],
  weight: ["200", "300", "400", "600", "700", "900"],
  display: "swap",
  preload: true,
  fallback: ["system-ui", "arial"],
});

export const metadata = {
  title: "Stronwell",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en" className="scroll-smooth">
      <head>
        {/* Preload critical assets */}
        <link rel="preload" href="/logo.png" as="image" />
        <link rel="preload" href="/letter.png" as="image" />
        
        {/* Theme and viewport configuration */}
        <meta name="theme-color" content="#000000" />
        <meta name="color-scheme" content="dark" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
        
        {/* Performance optimizations */}
        <link rel="dns-prefetch" href="//fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
      </head>
      <body
        className={`${titilliumWeb.variable} font-sans antialiased bg-black text-white min-h-screen overflow-x-hidden selection:bg-[#ff4f01] selection:text-white`}
        style={{
          fontFamily: 'var(--font-titillium-web), system-ui, -apple-system, sans-serif'
        }}
      >
        {/* Loading indicator */}
        <div id="loading-overlay" className="fixed inset-0 bg-black z-[9999] flex items-center justify-center pointer-events-none opacity-0 transition-opacity duration-500">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 border-2 border-[#ff4f01] border-t-transparent rounded-full animate-spin"></div>
            <span className="text-white text-lg font-medium">Loading...</span>
          </div>
        </div>

        {/* Scroll progress indicator */}
        <div 
          id="scroll-progress" 
          className="fixed top-0 left-0 h-1 bg-gradient-to-r from-[#ff4f01] to-[#ff6b2e] z-50 transition-all duration-150 ease-out"
          style={{ width: '0%' }}
        ></div>

        {/* Skip to main content for accessibility */}
        <a 
          href="#main-content" 
          className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-[#ff4f01] text-white px-4 py-2 rounded-lg z-[9999] font-medium transition-all duration-200"
        >
          Skip to main content
        </a>

        {/* Main app content */}
        <div className="relative min-h-screen flex flex-col">
          {children}
        </div>

        {/* Global scripts for enhanced functionality */}
        <script
          dangerouslySetInnerHTML={{
            __html: `
              // Scroll progress indicator
              function updateScrollProgress() {
                const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;
                const scrollProgress = (scrollTop / scrollHeight) * 100;
                const progressBar = document.getElementById('scroll-progress');
                if (progressBar) {
                  progressBar.style.width = scrollProgress + '%';
                }
              }

              // Smooth loading transition
              function hideLoadingOverlay() {
                const overlay = document.getElementById('loading-overlay');
                if (overlay) {
                  overlay.style.opacity = '0';
                  setTimeout(() => {
                    overlay.style.display = 'none';
                  }, 500);
                }
              }

              // Initialize on DOM ready
              document.addEventListener('DOMContentLoaded', function() {
                hideLoadingOverlay();
                updateScrollProgress();
                
                // Add scroll listener
                window.addEventListener('scroll', updateScrollProgress, { passive: true });
                
                // Add smooth scroll behavior
                document.documentElement.style.scrollBehavior = 'smooth';
                
                // Optimize images loading
                const images = document.querySelectorAll('img[data-src]');
                const imageObserver = new IntersectionObserver((entries) => {
                  entries.forEach(entry => {
                    if (entry.isIntersecting) {
                      const img = entry.target;
                      img.src = img.dataset.src;
                      img.removeAttribute('data-src');
                      imageObserver.unobserve(img);
                    }
                  });
                });
                
                images.forEach(img => imageObserver.observe(img));
                
                // Prevent horizontal scroll
                document.body.style.overflowX = 'hidden';
              });

              // Handle route changes
              window.addEventListener('beforeunload', function() {
                const overlay = document.getElementById('loading-overlay');
                if (overlay) {
                  overlay.style.display = 'flex';
                  overlay.style.opacity = '1';
                }
              });
            `
          }}
        />

        {/* Development helpers */}
        {process.env.NODE_ENV === 'development' && (
          <div className="fixed bottom-4 right-4 bg-black/80 backdrop-blur-sm border border-white/20 rounded-lg p-2 text-xs text-white/70 font-mono z-[9998]">
            {/* <div>ENV: {process.env.NODE_ENV}</div> */}
            <div>Screen: <span className="sm:hidden">XS</span><span className="hidden sm:inline md:hidden">SM</span><span className="hidden md:inline lg:hidden">MD</span><span className="hidden lg:inline xl:hidden">LG</span><span className="hidden xl:inline">XL</span></div>
          </div>
        )}
      </body>
    </html>
  );
}
